0$usqrt  %3 = alloca i64, align 8
1$usqrt  %4 = alloca %struct.int_sqrt*, align 8
2$usqrt  %5 = alloca i64, align 8
3$usqrt  %6 = alloca i64, align 8
4$usqrt  %7 = alloca i64, align 8
5$usqrt  %8 = alloca i32, align 4
6$usqrt  store i64 %0, i64* %3, align 8
7$usqrt  store %struct.int_sqrt* %1, %struct.int_sqrt** %4, align 8
8$usqrt  store i64 0, i64* %5, align 8
9$usqrt  store i64 0, i64* %6, align 8
10$usqrt  store i64 0, i64* %7, align 8
11$usqrt  store i32 0, i32* %8, align 4
12$usqrt0  br label %9
13$usqrt  %10 = load i32, i32* %8, align 4
14$usqrt  %11 = icmp slt i32 %10, 32
15$usqrt1  br i1 %11, label %12, label %39
16$usqrt  %13 = load i64, i64* %6, align 8
17$usqrt  %14 = shl i64 %13, 2
18$usqrt  %15 = load i64, i64* %3, align 8
19$usqrt  %16 = and i64 %15, 3221225472
20$usqrt  %17 = lshr i64 %16, 30
21$usqrt  %18 = add i64 %14, %17
22$usqrt  store i64 %18, i64* %6, align 8
23$usqrt  %19 = load i64, i64* %3, align 8
24$usqrt  %20 = shl i64 %19, 2
25$usqrt  store i64 %20, i64* %3, align 8
26$usqrt  %21 = load i64, i64* %5, align 8
27$usqrt  %22 = shl i64 %21, 1
28$usqrt  store i64 %22, i64* %5, align 8
29$usqrt  %23 = load i64, i64* %5, align 8
30$usqrt  %24 = shl i64 %23, 1
31$usqrt  %25 = add i64 %24, 1
32$usqrt  store i64 %25, i64* %7, align 8
33$usqrt  %26 = load i64, i64* %6, align 8
34$usqrt  %27 = load i64, i64* %7, align 8
35$usqrt  %28 = icmp uge i64 %26, %27
36$usqrt2  br i1 %28, label %29, label %35
37$usqrt  %30 = load i64, i64* %7, align 8
38$usqrt  %31 = load i64, i64* %6, align 8
39$usqrt  %32 = sub i64 %31, %30
40$usqrt  store i64 %32, i64* %6, align 8
41$usqrt  %33 = load i64, i64* %5, align 8
42$usqrt  %34 = add i64 %33, 1
43$usqrt  store i64 %34, i64* %5, align 8
44$usqrt4  br label %35
45$usqrt5  br label %36
46$usqrt  %37 = load i32, i32* %8, align 4
47$usqrt  %38 = add nsw i32 %37, 1
48$usqrt  store i32 %38, i32* %8, align 4
49$usqrt6  br label %9
50$usqrt  %40 = load %struct.int_sqrt*, %struct.int_sqrt** %4, align 8
51$usqrt  %41 = bitcast %struct.int_sqrt* %40 to i8*
52$usqrt  %42 = bitcast i64* %5 to i8*
53$usqrt  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %41, i8* %42, i64 8, i32 4, i1 false)
54$usqrt  ret void
55$main  %1 = alloca i32, align 4
56$main  %2 = alloca i32, align 4
57$main  %3 = alloca i64, align 8
58$main  %4 = alloca %struct.int_sqrt, align 4
59$main  store i32 0, i32* %1, align 4
60$main  store i64 1072497001, i64* %3, align 8
61$main  store i32 0, i32* %2, align 4
62$main7  br label %5
63$main  %6 = load i32, i32* %2, align 4
64$main  %7 = icmp slt i32 %6, 2
65$main8  br i1 %7, label %8, label %20
66$main  %9 = load i32, i32* %2, align 4
67$main  %10 = sext i32 %9 to i64
68$main  call void @usqrt(i64 %10, %struct.int_sqrt* %4)
69$main  %11 = load i32, i32* %2, align 4
70$main  %12 = getelementptr inbounds %struct.int_sqrt, %struct.int_sqrt* %4, i32 0, i32 0
71$main  %13 = load i32, i32* %12, align 4
72$main  %14 = getelementptr inbounds %struct.int_sqrt, %struct.int_sqrt* %4, i32 0, i32 1
73$main  %15 = load i32, i32* %14, align 4
74$main  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i32 0, i32 0), i32 %11, i32 %13, i32 %15)
75$main9  br label %17
76$main  %18 = load i32, i32* %2, align 4
77$main  %19 = add nsw i32 %18, 1
78$main  store i32 %19, i32* %2, align 4
79$main11  br label %5
80$main  %21 = load i64, i64* %3, align 8
81$main  call void @usqrt(i64 %21, %struct.int_sqrt* %4)
82$main  %22 = load i64, i64* %3, align 8
83$main  %23 = getelementptr inbounds %struct.int_sqrt, %struct.int_sqrt* %4, i32 0, i32 0
84$main  %24 = load i32, i32* %23, align 4
85$main  %25 = getelementptr inbounds %struct.int_sqrt, %struct.int_sqrt* %4, i32 0, i32 1
86$main  %26 = load i32, i32* %25, align 4
87$main  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i32 0, i32 0), i64 %22, i32 %24, i32 %26)
88$main  ret i32 0
